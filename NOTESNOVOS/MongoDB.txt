mongosh -> se conectar a banco

show databases-> mostra os data base  que tem 

Criar banco de dados 
use Alura

criando uma coleção 

db.createCollection("series")

para dropa uma collection ou banco 

db.series.drop()

db.dropDatabase()

formato de inserir uma info no banco mongo 
 { 
    "Série": "Pataal Lok",
    "Ano de lançamento": 2020,
    "Temporadas disponíveis": 1,
    "Linguagem": "Hindi",
    "Gênero": ["Drama"],
    "IMDb Avaliação": 7.5,
    "Classificação": "18+"
}
por linha de comando, 
db.users.insertOn -> para inserir um por vez

db.series.insertMany -> varios por vez 

db.series.insertOne({
"Série": "Fleabag",
        "Ano de lançamento": 2016,
        "Temporadas disponíveis": 2,
        "Linguagem": "Inglês",
        "IMDb Avaliação": 8.7})


ex: de varias 


db.series.insertMany([
{        "Série": "Made in Heaven",
        "Temporadas disponíveis": 1,
        "Linguagem": "Hindi",
        "Genero": ["Drama"],
        "IMDb Avaliação": 8.3,
        "Classificação": "18+"
    },{
        "Série": "Homecoming",
        "Temporadas disponíveis": 2,
        "Linguagem": "Inglês",
        "Genero": ["Drama"],
        "IMDb Avaliação": 7.5,
        "Classificação": "16+"
    }])
--------------------------------------------------------------------------------------------------------------------------------
por procura 
Filter {"Ano de lançamento": 2020}
Project {"Série": 1, "Classificação": 1}
Project {"Série": 1, "Classificação": 1, _id:0}
Sort {Série: 1}
Sort {Série: -1}


FILTER: utilizado para especificar qual será a condição que os documentos devem atender para serem retornados na busca.

PROJECT: utilizado para especificar quais campos serão ou não retornados na consulta.

Ao Informar o nome do campo e informar 0, todos os campos, exceto os campos especificados no campo project, são retornados. Se o campo receber o valor de 1, ele será retornado na consulta. O campo _id é retornado por padrão, a menos que este seja especificado no campo project e definido como 0.
SORT: especifica a ordem de classificação dos documentos retornados.

Para especificar a ordem crescente de um campo, defina o campo como 1.
Para especificar a ordem decrescente de um campo, defina o campo como -1.
MAX TIME MS: define o limite de tempo cumulativo em milissegundos para processar as operações da barra de consulta. Se o limite de tempo for atingido antes da conclusão da operação, o Compass interrompe a operação.

COLLATION: utilizado para especificar regras específicas do idioma para comparação de textos, como regras para letras maiúsculas ou minúsculas, acentos, entre outros.

SKIP: especifica quantos documentos devem ser ignorados antes de retornar o conjunto de resultados.

LIMIT: especifica o número máximo de documentos a serem retornados.
==========================================================================================================================================================================================================================================================================================================================
Filter {$or: [{"Ano de lançamento": 2018}, {"Classificação": "18+"}]}

pesquisa um ou outro

$and-> os dois verdadeiro 


Filter {"Ano de lançamento": {$in: [2019, 2020]}}

um e outro $in:

Filter {"Temporadas disponíveis": {$gt: 2}} -> igual 
Filter {"Temporadas disponíveis": {$gte: 2}} -> igual ou maior  a 2 
Filter {"Temporadas disponíveis": {$lt: 5}}-> menor 
Filter {"Temporadas disponíveis": {$lte: 5}}-> igual ou menor 
Project {"Série":1, "Linguagem":1, _id: 0}

Sort {"Série": 1}
db.series.find()
db.series.find({"Ano de lançamento": 2018})
db.series.find({},{"Série":1, "Ano de lançamento": 1, "_id":0}) -> oq deve ser mostrado
db.series.find({"Ano de lançamento": {$in: [2019,2020]}})
db.series.find().limit(5) -> para pesquisar pelo comando 
db.series.find().sort({"Série":1})-> ordenar
db.series.find({"Temporadas disponíveis": {$gte: 4}})
db.series.find({"Ano de lançamento": {$ne: 2020}})
db.series.find({"Genero": {$all:["Ação", "Comédia"]}})
---------------------------------------------------------------------------------------------------------------------------------------------------
update 
db.users.updateMany(                 ← collection
  { age:  { $lt: 18 } },             ← update filter
    { $set:  { status: "reject" } }  ← update action
)

db.series.updateOne({"Série": "Grimm"},{$set: {"Temporadas disponíveis": 6}})
db.series.updateMany({"Série":{$in:["Four More Shots Please", "Fleabag"]}},{$set: {"Classificação": "18+"}})
db.collection.replaceOne(
   <filter>,
   <replacement> )
---------------------------------------------------------------------------------------------------------------------------------------
dletar 
db.series.deleteOne({"Série": "The Boys"})
db.series.deleteMany({"Temporadas disponíveis": 1})
db.series.deleteMany({}) -> todos



